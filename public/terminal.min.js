/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Commands.js":
/*!*************************!*\
  !*** ./src/Commands.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony import */ var _Console_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Console.js */ \"./src/Console.js\");\n\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n\r\n    modules() {\r\n        for(let [name, module] of _Console_js__WEBPACK_IMPORTED_MODULE_0__.default.getModules()) {\r\n            _Console_js__WEBPACK_IMPORTED_MODULE_0__.default.print(name);\r\n        }  \r\n    },\r\n\r\n    async install([ modulePath ]) {\r\n        if(modulePath) {\r\n            const module = await _Console_js__WEBPACK_IMPORTED_MODULE_0__.default.fetchModule(modulePath).catch(err => {\r\n                _Console_js__WEBPACK_IMPORTED_MODULE_0__.default.print(\"[Error] \" + err.message);\r\n            })\r\n            await _Console_js__WEBPACK_IMPORTED_MODULE_0__.default.installModule(module);\r\n        } else {\r\n            _Console_js__WEBPACK_IMPORTED_MODULE_0__.default.print(\"Provide a module path.\");\r\n        }\r\n    },\r\n\r\n    async uninstall([ modulePath ]) {\r\n        if(modulePath && modulePath != \"\") {\r\n            await _Console_js__WEBPACK_IMPORTED_MODULE_0__.default.uninstallModule(modulePath);\r\n        } else {\r\n            _Console_js__WEBPACK_IMPORTED_MODULE_0__.default.print(\"Provide a module name.\");\r\n        }\r\n    },\r\n\r\n    clear(args) {\r\n        const terminal = _Console_js__WEBPACK_IMPORTED_MODULE_0__.default.getTerminal();\r\n        terminal.clear();\r\n    },\r\n\r\n    help() {\r\n        _Console_js__WEBPACK_IMPORTED_MODULE_0__.default.print(`\\nCommands: \\n${Object.keys(this).join(\", \")}\\n`);\r\n    },\r\n\r\n    exit(args) {\r\n        return new Promise((resolve) => {\r\n            const terminal = _Console_js__WEBPACK_IMPORTED_MODULE_0__.default.getTerminal();\r\n            terminal.setPrefix(\"\");\r\n            terminal.disableInput();\r\n            terminal.clear();\r\n            _Console_js__WEBPACK_IMPORTED_MODULE_0__.default.print(\"Bye.\");\r\n\r\n            terminal.remove();\r\n\r\n            setTimeout(() => window.close(), 1000);\r\n        })\r\n    }\r\n\r\n});\r\n\n\n//# sourceURL=webpack://terminal/./src/Commands.js?");

/***/ }),

/***/ "./src/Console.js":
/*!************************!*\
  !*** ./src/Console.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => /* binding */ Console\n/* harmony export */ });\n/* harmony import */ var _Commands_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Commands.js */ \"./src/Commands.js\");\n/* harmony import */ var _Terminal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Terminal.js */ \"./src/Terminal.js\");\n\r\n\r\n\r\nconst terminal = new _Terminal_js__WEBPACK_IMPORTED_MODULE_1__.default();\r\n\r\nlet modules = new Map();\r\n\r\nconst MODULE_REGISTRY_ID = \"modules\";\r\n\r\nfunction getModuleRegistry() {\r\n    let moduleRegistry = localStorage.getItem(MODULE_REGISTRY_ID);\r\n    if(!moduleRegistry) {\r\n        moduleRegistry = '{ \"modules\": [] }';\r\n    }\r\n    return JSON.parse(moduleRegistry);\r\n}\r\n\r\nfunction saveModuleRegistry(reg) {\r\n    localStorage.setItem(MODULE_REGISTRY_ID, JSON.stringify(reg));\r\n}\r\n\r\nlet idle = true;\r\n\r\nclass Console {\r\n\r\n    static get INPUT_PREFIX() {\r\n        return \"terminal@web:~$ \";\r\n    }\r\n    \r\n    static async loadModules() {\r\n        const moduleRegistry = getModuleRegistry();\r\n        for(let modulePath of moduleRegistry.modules) {\r\n            const module = await Console.fetchModule(modulePath).catch(err => {\r\n                Console.print(\"[Module Error] Module: '\"+modulePath+\"': \" + err.message);\r\n            });\r\n            Console.installModule(module);\r\n        }\r\n    }\r\n\r\n    static async evaluateInput(args) {\r\n        function evaluate() {\r\n            const result = eval(args.join(\" \"));\r\n            if(result) {\r\n                Console.print(result.toString());\r\n            }\r\n        }\r\n\r\n        if(args[0] != \"\") {\r\n            if(_Commands_js__WEBPACK_IMPORTED_MODULE_0__.default[args[0]]) {\r\n                idle = false;\r\n                document.title = args[0];\r\n                let exit;\r\n                try {\r\n                    exit = await _Commands_js__WEBPACK_IMPORTED_MODULE_0__.default[args[0]](args.slice(1));\r\n                } catch(err) {\r\n                    document.title = \"Terminal\";\r\n                    throw new Error(err);\r\n                }\r\n                document.title = \"Terminal\";\r\n                if(exit !== 0 && exit != undefined) {\r\n                    Console.print(\"\\nProcess exited.\\n\");\r\n                }\r\n                terminal.read(this.INPUT_PREFIX);\r\n                idle = true;\r\n            } else {\r\n                try {\r\n                    evaluate.call(Console);\r\n                } catch(err) {\r\n                    console.error(err);\r\n                    Console.print(\"\\n[Error] \" + err.message);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    static getModules() {\r\n        return modules;\r\n    }\r\n\r\n    static async fetchModule(path) {\r\n        const raw = await fetch(path).then(res => res.text());\r\n        const base64 = \"data:application/javascript;base64,\" + btoa(raw);\r\n        const module = await fetchModule(base64);\r\n        module.origin = path;\r\n\r\n        // register module in localstorage\r\n        let registry = getModuleRegistry();\r\n        if(registry.modules.indexOf(module.origin) === -1) {\r\n            registry.modules.push(module.origin);\r\n        }\r\n        saveModuleRegistry(registry);\r\n\r\n        return module;\r\n    }\r\n\r\n    static async installModule(module) {\r\n        const name = module.moduleName || module.origin;\r\n        if(modules.get(name)) {\r\n            Console.log(`[Module] Module '${name}' already installed.`);\r\n            return;\r\n        }\r\n        try {\r\n            if(module.install) {\r\n                modules.set(name, module);\r\n                await module.install(Console);\r\n\r\n                Console.log(`[Module] Installed module '${name}'`);\r\n    \r\n                if(module.commandName) {\r\n                    _Commands_js__WEBPACK_IMPORTED_MODULE_0__.default[module.commandName] = module.run;\r\n                }\r\n            } else {\r\n                throw new Error(`Missing install method in module: ${name}`);\r\n            }\r\n        } catch(err) {\r\n            Console.log(\"[Error] \" + err.message);\r\n        }\r\n    }\r\n\r\n    static uninstallModule(moduleName) {\r\n        const module = modules.get(moduleName);\r\n        if(module) {\r\n            modules.delete(moduleName);\r\n            module.uninstall();\r\n            if(module.commandName) {\r\n                _Commands_js__WEBPACK_IMPORTED_MODULE_0__.default[module.commandName] = null;\r\n            }\r\n\r\n            // nuregister\r\n            let moduleRegistry = getModuleRegistry();\r\n            moduleRegistry.modules.splice(moduleRegistry.modules.indexOf(module.origin), 1);\r\n            saveModuleRegistry(moduleRegistry);\r\n\r\n            Console.print(`[Module] Uninstalled module '${moduleName}'`);\r\n        } else {\r\n            Console.print(\"Module not found.\");\r\n        }\r\n    }\r\n    \r\n    static getTerminal() {\r\n        return terminal;\r\n    }\r\n    \r\n    static async simulateWrite(str, ms = 24) {\r\n        return new Promise((resolve) => {\r\n            terminal.disableInput();\r\n    \r\n            const time = ms;\r\n    \r\n            let index = 0;\r\n            const int = setInterval(() => {\r\n    \r\n                const curr = str[index];\r\n    \r\n                terminal.write(curr);\r\n    \r\n                index++;\r\n    \r\n                if (index == str.length) {\r\n                    clearInterval(int);\r\n                    resolve();\r\n                }\r\n            }, time);\r\n        })\r\n    }\r\n    \r\n    static print(str) {\r\n        if(typeof str == \"object\") {\r\n            str = JSON.stringify(str, null, '\\t');\r\n        }\r\n        const lines = str.split(\"\\n\");\r\n        for (let line of lines) {\r\n            terminal.write(line);\r\n            terminal.write('\\n');\r\n        }\r\n    }\r\n\r\n    static async readLine(prefix = \"\") {\r\n        const value = await terminal.read(prefix);\r\n        return value;\r\n    }\r\n\r\n    static log(...str) {\r\n        const ts = `${new Date().toGMTString()}: `;\r\n        return this.print(str.join(\" \"));\r\n    }\r\n    \r\n    static printHTML(width, height, content) {\r\n        this.print(`\\\\\\\\\\\\HTML ${width} ${height} ${content}`);\r\n    }\r\n    \r\n    static sleep(time) {\r\n        return new Promise((resolve) => {\r\n            setTimeout(() => resolve(), time);\r\n        })\r\n    }\r\n    \r\n    static clear() {\r\n        terminal.clear();\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://terminal/./src/Console.js?");

/***/ }),

/***/ "./src/ConsoleModule.js":
/*!******************************!*\
  !*** ./src/ConsoleModule.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => /* binding */ ConsoleModule\n/* harmony export */ });\nclass ConsoleModule {\r\n\r\n    static get moduleName() {\r\n        return \"console-module\";\r\n    }\r\n    \r\n    static get commandName() {\r\n        return \"\";\r\n    }\r\n\r\n    static install() {\r\n        \r\n    }\r\n    \r\n    static uninstall() {\r\n        \r\n    }\r\n\r\n    static run(args) {\r\n\r\n    }\r\n}\r\n\r\nwindow[\"ConsoleModule\"] = ConsoleModule;\r\n\n\n//# sourceURL=webpack://terminal/./src/ConsoleModule.js?");

/***/ }),

/***/ "./src/FileSystem.js":
/*!***************************!*\
  !*** ./src/FileSystem.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => /* binding */ FileSystem\n/* harmony export */ });\n/* harmony import */ var _Console__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Console */ \"./src/Console.js\");\n\r\n\r\nconst fs = {\r\n    children: [\r\n        {\r\n            name: \"File.png\",\r\n            type: \"file\",\r\n        },\r\n        {\r\n            name: \"Tests\",\r\n            type: \"directory\",\r\n            children: [\r\n                {\r\n                    name: \"TestFile.jpg\",\r\n                    type: \"file\",\r\n                },\r\n                {\r\n                    name: \"TestText.txt\",\r\n                    type: \"file\",\r\n                },\r\n                {\r\n                    name: \"Tests2\",\r\n                    type: \"directory\",\r\n                    children: [\r\n                        {\r\n                            name: \"TestFile2.jpg\",\r\n                            type: \"file\",\r\n                        },\r\n                        {\r\n                            name: \"TestText2.txt\",\r\n                            type: \"file\",\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n};\r\nlet cd = \"/\";\r\n\r\nclass FileSystem {\r\n\r\n    static getDirByName(cdir, name) {\r\n        for(let child of cdir.children) {\r\n            if(child.type == \"directory\" && child.name == name) {\r\n                return child;\r\n            }\r\n        }\r\n    }\r\n\r\n    static getDirByPath(path) {\r\n        const findChild = (root, name) => {\r\n            for(let child of root.children) {\r\n                if(child.type == \"directory\" && child.name == name) {\r\n                    return child;\r\n                }\r\n            }\r\n        }\r\n\r\n        let curr = fs;\r\n        let dirpath = path.split(\"/\").filter(p => p != \"\").reverse();\r\n\r\n        while(dirpath.length > 0) {\r\n            curr = findChild(curr, dirpath[dirpath.length-1]);\r\n            if(!curr) {\r\n                break;\r\n            } else {\r\n                dirpath.pop();\r\n            }\r\n        }\r\n\r\n        return curr;\r\n    }\r\n\r\n    static changeDir(relatievPath) {\r\n        let newDir = cd + relatievPath + \"/\";\r\n        if(relatievPath == \"..\") {\r\n            newDir = cd.split(\"/\").splice(0, cd.split(\"/\").length - 2).join(\"/\");\r\n        }\r\n        const dir = this.getDirByPath(newDir);\r\n        if(dir) {\r\n            cd = newDir;\r\n        } else {\r\n            _Console__WEBPACK_IMPORTED_MODULE_0__.default.print('Directory not found.');\r\n        }\r\n    }\r\n\r\n    static get modules() {\r\n        return [\r\n            {\r\n                moduleName: \"ls\",\r\n                commandName: \"ls\",\r\n                install() {},\r\n                run: (arguemnts) => {\r\n                    _Console__WEBPACK_IMPORTED_MODULE_0__.default.print(\"\");\r\n                    _Console__WEBPACK_IMPORTED_MODULE_0__.default.print(cd);\r\n                    _Console__WEBPACK_IMPORTED_MODULE_0__.default.print(\"--------------------------------------\");\r\n                    for(let child of this.getDirByPath(cd).children) {\r\n                        _Console__WEBPACK_IMPORTED_MODULE_0__.default.print(`${child.type.padEnd(15, \" \")} ${child.name}`);\r\n                    }\r\n                    _Console__WEBPACK_IMPORTED_MODULE_0__.default.print(\"\");\r\n                }\r\n            },\r\n            {\r\n                moduleName: \"cd\",\r\n                commandName: \"cd\",\r\n                install() {},\r\n                run: (args) => {\r\n                    if(args[0] != \"\") {\r\n                        this.changeDir(args[0]);\r\n                    }\r\n                    _Console__WEBPACK_IMPORTED_MODULE_0__.default.print(cd);\r\n                }\r\n            }\r\n        ]\r\n    }\r\n\r\n}\n\n//# sourceURL=webpack://terminal/./src/FileSystem.js?");

/***/ }),

/***/ "./src/PostProcessing.js":
/*!*******************************!*\
  !*** ./src/PostProcessing.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createWebgl2Canvas\": () => /* binding */ createWebgl2Canvas\n/* harmony export */ });\nfunction createWebgl2Canvas(canvas, options = {\r\n    alpha: false,\r\n}) {\r\n\r\n    let lastIamge = null;\r\n\r\n    const vertexShaderSource = `#version 300 es\r\n        in vec4 a_position;\r\n        in vec2 a_uv;\r\n        out vec2 v_uv;\r\n\r\n        void main() {\r\n            gl_Position = a_position;\r\n            v_uv = a_uv;\r\n        }\r\n    `;\r\n\r\n    const fragmentShaderSource = `#version 300 es\r\n        precision highp float;\r\n\r\n        uniform sampler2D u_texture;\r\n        uniform vec2 resolution;\r\n        uniform float time;\r\n\r\n        in vec2 v_uv;\r\n        out vec4 outColor;\r\n\r\n        const int samples = 32, LOD = 1, sLOD = 1 << LOD;\r\n        const float sigma = float(samples) * .25;\r\n\r\n        float gaussian(vec2 i) {\r\n            return exp( -.5* dot(i/=sigma,i) ) / ( 6.28 * sigma*sigma );\r\n        }\r\n\r\n        vec4 blur(sampler2D sp, vec2 U, vec2 scale) {\r\n            vec4 O = vec4(0);  \r\n            int s = samples / sLOD;\r\n            \r\n            for ( int i = 0; i < s * s; i++ ) {\r\n                vec2 d = vec2(i % s, i / s) * float(sLOD) - float(samples) / 2.0;\r\n                O += gaussian(d) * textureLod(sp, U + scale * d , float(LOD));\r\n            }\r\n            \r\n            return O / O.a;\r\n        }\r\n        \r\n        void main() {\r\n            float ca_scale = 0.5;\r\n            float bloom_scale = 1.0;\r\n\r\n            float r = texture(u_texture, vec2(v_uv.x - (ca_scale / resolution.x), v_uv.y)).r;\r\n            float g = texture(u_texture, vec2(v_uv.x, v_uv.y - (ca_scale / resolution.x))).g;\r\n            float b = texture(u_texture, vec2(v_uv.x - (ca_scale / resolution.x), v_uv.y - (ca_scale / resolution.x))).b;\r\n\r\n            vec4 rgba = vec4(r, g, b, 1.0);\r\n\r\n            vec4 rgbaBlured = blur(u_texture, v_uv, bloom_scale / resolution.xy);\r\n\r\n            outColor = rgba * 0.9;\r\n            outColor += rgbaBlured * 0.5;\r\n\r\n            if(mod(v_uv.y * resolution.y, 2.0) >= 1.5) {\r\n                outColor *= 0.69;\r\n            }\r\n\r\n            float v = mod(time * 5.0 - v_uv.y, -1.0);\r\n            if(v < -0.5 && v > -0.9) {\r\n                outColor += outColor * 0.05;\r\n            }\r\n        }\r\n    `;\r\n\r\n    const gl = canvas.getContext(\"webgl2\", {\r\n        alpha: false,\r\n        antialias: true,\r\n        premultipliedAlpha: false,\r\n        desynchronized: true,\r\n        preserveDrawingBuffer: true,\r\n    });\r\n\r\n    function createShader(gl, type, source) {\r\n        var shader = gl.createShader(type);\r\n        gl.shaderSource(shader, source);\r\n        gl.compileShader(shader);\r\n        var success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n        if (success) {\r\n            return shader;\r\n        }\r\n\r\n        console.log(gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n    }\r\n\r\n    var vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\r\n    var fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\r\n\r\n    function createProgram(gl, vertexShader, fragmentShader) {\r\n        var program = gl.createProgram();\r\n        gl.attachShader(program, vertexShader);\r\n        gl.attachShader(program, fragmentShader);\r\n        gl.linkProgram(program);\r\n        var success = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n        if (success) {\r\n            return program;\r\n        }\r\n\r\n        console.log(gl.getProgramInfoLog(program));\r\n        gl.deleteProgram(program);\r\n    }\r\n\r\n    var program = createProgram(gl, vertexShader, fragmentShader);\r\n\r\n    const vao = gl.createVertexArray();\r\n    gl.bindVertexArray(vao);\r\n\r\n    // positions\r\n    const positionAttributeLocation = gl.getAttribLocation(program, \"a_position\");\r\n    const positionBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n\r\n    const positions = [\r\n        -1, -1,\r\n        -1, 1,\r\n        1, 1,\r\n\r\n        1, 1,\r\n        1, -1,\r\n        -1, -1,\r\n    ];\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\r\n    gl.enableVertexAttribArray(positionAttributeLocation);\r\n    gl.vertexAttribPointer(positionAttributeLocation, 2, gl.FLOAT, false, 0, 0);\r\n\r\n\r\n    // uvs\r\n    const uvAttributeLocation = gl.getAttribLocation(program, \"a_uv\");\r\n    const uvBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, uvBuffer);\r\n\r\n    const uvs = [\r\n        0, 0,\r\n        0, -1,\r\n        1, -1,\r\n\r\n        1, -1,\r\n        1, 0,\r\n        0, 0,\r\n    ];\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(uvs), gl.STATIC_DRAW);\r\n    gl.enableVertexAttribArray(uvAttributeLocation);\r\n    gl.vertexAttribPointer(uvAttributeLocation, 2, gl.FLOAT, false, 0, 0);\r\n\r\n    gl.useProgram(program);\r\n    gl.bindVertexArray(vao);\r\n\r\n    // Create a texture.\r\n    const texture = gl.createTexture();\r\n\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n\r\n    const U_resolution = gl.getUniformLocation(program, \"resolution\");\r\n    const U_time = gl.getUniformLocation(program, \"time\");\r\n\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n\r\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\r\n\r\n    let width = 0;\r\n\r\n    return {\r\n        draw(image) {\r\n            lastIamge = image;\r\n\r\n            gl.uniform1fv(U_time, [ performance.now() / 1000 ]);\r\n\r\n            gl.viewport(0, 0, canvas.width, canvas.height);\r\n            if(width === image.width) {\r\n                gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, image);\r\n            } else {\r\n                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, image.width, image.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, image);\r\n                width = image.width;\r\n\r\n                gl.uniform2fv(U_resolution, [ image.width, image.height ]);\r\n            }\r\n            gl.drawArrays(gl.TRIANGLES, 0, positions.length / 2);\r\n\r\n            width = image.width;\r\n        },\r\n        reformat(width, height) {\r\n            canvas.width = width;\r\n            canvas.height = height;\r\n\r\n            if(lastIamge) {\r\n                this.draw(lastIamge);\r\n            }\r\n        },\r\n        get canvas() {\r\n            return canvas;\r\n        }\r\n    };\r\n}\r\n\n\n//# sourceURL=webpack://terminal/./src/PostProcessing.js?");

/***/ }),

/***/ "./src/Terminal.js":
/*!*************************!*\
  !*** ./src/Terminal.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => /* binding */ Terminal\n/* harmony export */ });\n/* harmony import */ var _PostProcessing_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PostProcessing.js */ \"./src/PostProcessing.js\");\n\r\n\r\nconst BORDER_PADDING = [32, 32];\r\nconst CURSOR_OFFSET = [1, 0];\r\nconst FONT_SIZE = 13;\r\nconst FONT_FAMILY = \"monospace\";\r\nconst FONT_WEIGHT = 200;\r\nconst FONT_COLOR = '#eee';\r\nconst SLECTION_COLOR = '#717171';\r\nconst SHADOW_BLUR = 0;\r\nconst CURSOR_HEIGHT = 16;\r\nconst CURSOR_WIDTH = 6;\r\nconst VALID_CHARS = ` ~{}@=<>^abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ()[]-.,_:;#+'*/&%$§!?€1234567890\"`;\r\nconst LINE_PADDING = 3;\r\n\r\nlet LINE_WRAPPING = true;\r\nlet CHAR_WIDTH = 7.69;\r\nlet CHAR_HEIGHT = 12;\r\n\r\nlet canvas, context;\r\nlet buffer = [\r\n    \"Terminal Version 1.0\",\r\n    \"(c) 2020 luckydye. All rights reserved.\",\r\n    \"\",\r\n];\r\nlet hiddenBuffer = [];\r\nlet cursor = [\r\n    buffer[buffer.length-1].length, \r\n    buffer.length - 1\r\n];\r\nlet view = [0, 0];\r\nlet selection = [[0,0], [0,0]];\r\nlet prefix = \"\";\r\nlet inputEnabled = true;\r\nlet hideOutput = false;\r\nlet history = localStorage.history ? JSON.parse(localStorage.history) : [];\r\nlet historyCursor = -1;\r\n\r\nlet img = new Image();\r\n\r\nconst htmlElements = {};\r\n\r\nclass SubmitEvent extends Event {\r\n    constructor(value) {\r\n        super('submit');\r\n        this.value = value;\r\n    }\r\n}\r\n\r\nclass ShortcutEvent extends Event {\r\n\r\n    get defaultPrevented() {\r\n        return this._defaultPrevented;\r\n    }\r\n\r\n    set defaultPrevented(v) {\r\n        this._defaultPrevented = v;\r\n    }\r\n\r\n    constructor(key) {\r\n        super('shortcut');\r\n        this.key = key;\r\n        this._defaultPrevented = false;\r\n    }\r\n}\r\n\r\nclass Terminal extends HTMLElement {\r\n\r\n    get hideOutput() {\r\n        return hideOutput;\r\n    }\r\n\r\n    set hideOutput(v) {\r\n        hideOutput = v;\r\n    }\r\n\r\n    get inputEnabled() {\r\n        return inputEnabled;\r\n    }\r\n\r\n    set inputEnabled(v) {\r\n        inputEnabled = v;\r\n    }\r\n\r\n    get prefix() {\r\n        return prefix;\r\n    }\r\n    \r\n    set prefix(v) {\r\n        prefix = v;\r\n    }\r\n\r\n    get cursor() {\r\n        return cursor;\r\n    }\r\n\r\n    focus() {\r\n        canvas.focus();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.bounds = { x: 0, y: 0 };\r\n\r\n        canvas = document.createElement('canvas');\r\n        canvas.tabIndex = 0;\r\n        context = canvas.getContext(\"2d\");\r\n\r\n        window.addEventListener('resize', e => {\r\n            this.reformat();\r\n        })\r\n\r\n        window.addEventListener('wheel', e => {\r\n            const dir = Math.sign(e.deltaY) * 2;\r\n\r\n            const cursorY = this.getCursorPosition()[1];\r\n            const maxY = Math.max(0, cursorY - (canvas.height - (this.lineHeight * 3)));\r\n\r\n            view[1] = Math.max(0, Math.min(maxY, view[1] + dir * this.lineHeight));\r\n        });\r\n\r\n        this.addEventListener('keydown', e => {\r\n            this.handleInput(e);\r\n        })\r\n\r\n\r\n        // mouse selections\r\n        let mouseStart = [0, 0];\r\n\r\n        const setSelection = (index, px, py) => {\r\n            const pos = this.pixelToBufferPos(\r\n                px + view[0], \r\n                py + view[1]\r\n            );\r\n            selection[index][0] = pos[0];\r\n            selection[index][1] = pos[1];\r\n        }\r\n\r\n        const mouseDown = e => {\r\n            if(!this.bounds) return;\r\n\r\n            let x = e.clientX - this.bounds.x;\r\n            let y = e.clientY - this.bounds.y;\r\n\r\n            if(e.button === 0) {\r\n                mouseStart[0] = x;\r\n                mouseStart[1] = y;\r\n    \r\n                setSelection(0, x, y);\r\n                setSelection(1, x, y);\r\n                window.addEventListener(\"mousemove\", mouseMove); \r\n            }\r\n        }\r\n\r\n        const mouseUp = e => {\r\n            if(!this.bounds) return;\r\n\r\n            let x = e.clientX - this.bounds.x;\r\n            let y = e.clientY - this.bounds.y;\r\n\r\n            if(e.button === 0) {\r\n                let index = 1;\r\n                if(mouseStart[1] > y) {\r\n                    index = 0;\r\n                }\r\n                setSelection(index, x, y);\r\n                window.removeEventListener(\"mousemove\", mouseMove);\r\n            }\r\n        }\r\n\r\n        const mouseMove = e => {\r\n            if(!this.bounds) return;\r\n            \r\n            let x = e.clientX - this.bounds.x;\r\n            let y = e.clientY - this.bounds.y;\r\n\r\n            let index = 1;\r\n            if(mouseStart[1] > y) {\r\n                index = 0;\r\n            }\r\n            setSelection(index, x, y);\r\n        }\r\n\r\n        window.addEventListener(\"mousedown\", mouseDown);\r\n        window.addEventListener(\"mouseup\", mouseUp);\r\n\r\n        this.addEventListener(\"contextmenu\", e => {\r\n            const txt = this.getSelectionFromBuffer(selection);\r\n            navigator.clipboard.writeText(txt);\r\n            this.resetSelection();\r\n            e.preventDefault();\r\n        });\r\n\r\n        this.attachShadow({ mode: 'open' });\r\n    }\r\n    \r\n    resetSelection() {\r\n        selection = [[0,0], [0,0]];\r\n    }\r\n\r\n    getSelectionFromBuffer(selection) {\r\n        let copiedLines = [];\r\n\r\n        const startLine = selection[0][1];\r\n        const lines = selection[1][1] - selection[0][1];\r\n        const start = selection[0];\r\n        const end = selection[1];\r\n\r\n        for(let line = 0; line <= lines; line++) {\r\n            let a = line > 0 && lines > 0 ? 0 : start[0];\r\n            let b = line === lines ? end[0] : undefined;\r\n\r\n            const txt = buffer[startLine + line].slice(a, b);\r\n            copiedLines.push(txt);\r\n        }\r\n\r\n        return copiedLines.join(\"\\n\");\r\n    }\r\n\r\n    pixelToBufferPos(x, y) {\r\n        return [\r\n            Math.floor((x - BORDER_PADDING[0]) / CHAR_WIDTH), \r\n            Math.floor((y - BORDER_PADDING[1]) / this.lineHeight)\r\n        ]\r\n    }\r\n\r\n    getContext() {\r\n        return context;\r\n    }\r\n\r\n    init() {\r\n        const style = document.createElement('style');\r\n        style.innerHTML = `\r\n            :host {\r\n                width: 100%;\r\n                height: 100%;\r\n                overflow: hidden;\r\n            }\r\n            :host(:focus) {\r\n                z-index: 1000000;\r\n                opacity: 1;\r\n                pointer-events: all;\r\n            }\r\n            canvas {\r\n                filter: contrast(1.1) blur(.33px);\r\n                outline: none;\r\n            }\r\n            .inline-element {\r\n                position: absolute;\r\n                top: calc(var(--elementY) * 1px - var(--scrollY) * 1px);\r\n                left: calc(var(--elementX) * 1px);\r\n                height: calc(var(--elementHeight) * 1px);\r\n                width: calc(var(--elementWidth) * 1px);\r\n                display: block;\r\n                overflow: hidden;\r\n                color: #eee;\r\n                font-family: monospace;\r\n                user-select: none;\r\n            }\r\n            .inline-element + * {\r\n                display: inline;\r\n            }\r\n        `;\r\n        this.shadowRoot.appendChild(style);\r\n\r\n        const postCanvas = document.createElement('canvas');\r\n        postCanvas.width = 1280;\r\n        postCanvas.height = 720;\r\n        this.postCavnas = (0,_PostProcessing_js__WEBPACK_IMPORTED_MODULE_0__.createWebgl2Canvas)(postCanvas);\r\n        this.postCavnas.reformat(this.clientWidth, this.clientHeight);\r\n\r\n        this.postCavnas.canvas.tabIndex = 0;\r\n\r\n        this.shadowRoot.appendChild(this.postCavnas.canvas);\r\n    \r\n        this.loop();\r\n    }\r\n\r\n    connectedCallback() {\r\n        if(!canvas.parentNode) {\r\n            this.init();\r\n        }\r\n        this.reformat();\r\n    }\r\n\r\n    append(index, line) {\r\n        const temp = buffer.slice(0, index);\r\n        temp.push(line);\r\n        temp.push(...buffer.slice(index));\r\n\r\n        if(cursor[1] >= index) {\r\n            cursor[1]++;\r\n        }\r\n\r\n        this.setBuffer(temp);\r\n    }\r\n\r\n    setBuffer(newBuffer) {\r\n        buffer = newBuffer;\r\n    }\r\n\r\n    clear() {\r\n        buffer = [\"\"];\r\n        for(let ele in htmlElements) {\r\n            htmlElements[ele].remove();\r\n        }\r\n        this.setCursor(0, 0);\r\n    }\r\n\r\n    setCursor(x, y) {\r\n        cursor[0] = x != null ? x : cursor[0];\r\n        cursor[1] = y != null ? y : cursor[1];\r\n    }\r\n\r\n    setPrefix(str = \"\") {\r\n        this.prefix = str;\r\n    }\r\n\r\n    disableInput() {\r\n        this.inputEnabled = false;\r\n    }\r\n\r\n    enableInput() {\r\n        this.inputEnabled = true;\r\n    }\r\n\r\n    disableLineWrapping() {\r\n        LINE_WRAPPING = false;\r\n    }\r\n\r\n    enableLineWrapping() {\r\n        LINE_WRAPPING = true;\r\n    }\r\n\r\n    handleSubmit(line) {\r\n        if(hideOutput) {\r\n            line = hiddenBuffer.join(\"\");\r\n            hideOutput = false;\r\n        } else {\r\n            line = line.slice(this.prefix.length);\r\n        }\r\n        this.pushToHistory(line);\r\n        this.dispatchEvent(new SubmitEvent(line));\r\n    }\r\n\r\n    pushToHistory(input) {\r\n        if(input == history[0]) {\r\n            return;\r\n        }\r\n        if(input != \"\") {\r\n            history.unshift(input);\r\n        }\r\n        historyCursor = -1;\r\n        localStorage.history = JSON.stringify(history);\r\n    }\r\n\r\n    cancelInput() {\r\n        buffer[cursor[1]] = this.prefix;\r\n        this.setCursor(buffer[cursor[1]].length);\r\n    }\r\n\r\n    replaceInput(str) {\r\n        this.cancelInput();\r\n        this.write(str);\r\n    }\r\n\r\n    read(newPrefix) {\r\n        return new Promise((resolve) => {\r\n            const currLine = buffer[buffer.length-1];\r\n            this.inputEnabled = true;\r\n            this.prefix = newPrefix || currLine;\r\n            if(newPrefix && currLine !== newPrefix) {\r\n                this.write(newPrefix);\r\n            }\r\n\r\n            const submitCallback = e => {\r\n                resolve(e.value);\r\n                this.removeEventListener('submit', submitCallback);\r\n            }\r\n            this.addEventListener('submit', submitCallback);\r\n        })\r\n    }\r\n\r\n    newline() {\r\n        const newLine = \"\";\r\n        const currLine = buffer[buffer.length-1];\r\n        buffer.push(newLine);\r\n        cursor[0] = newLine.length;\r\n        cursor[1]++;\r\n        return currLine;\r\n    }\r\n\r\n    write(str) {\r\n        switch(str) {\r\n            case \"\\0\":\r\n                    // nothing (sleep)\r\n                break;\r\n            case \"\\r\":\r\n                    const currLine = this.newline();\r\n                    this.handleSubmit(currLine);\r\n                break;\r\n            case \"\\n\":\r\n                    this.newline();\r\n                break;\r\n            default:\r\n                const temp = buffer[cursor[1]].split(\"\").slice(0, cursor[0]);\r\n\r\n                if(hideOutput) {\r\n                    hiddenBuffer.push(str);\r\n                    temp.push(...(new Array(str.length).fill(\"*\")));\r\n                } else {\r\n                    temp.push(str);\r\n                }\r\n        \r\n                const tail = buffer[cursor[1]].split(\"\").slice(cursor[0]);\r\n                temp.push(...tail);\r\n                buffer[cursor[1]] = temp.join(\"\");\r\n                cursor[0] += str.length;\r\n        }\r\n\r\n        const cursorY = this.getCursorPosition()[1];\r\n        view[1] = Math.max(0, cursorY - (canvas.height - (this.lineHeight * 3)));\r\n    }\r\n\r\n    handleInput(e) {\r\n        let key = e.key;\r\n        const shift = e.shiftKey;\r\n        const ctrl = e.ctrlKey;\r\n\r\n        if(inputEnabled) {\r\n            if(key == \"Enter\") {\r\n                this.write('\\r');\r\n            }\r\n            if(key == \"ArrowUp\") {\r\n                historyCursor = Math.min(historyCursor + 1, history.length-1);\r\n                if(history[historyCursor]) {\r\n                    this.replaceInput(history[historyCursor]);\r\n                }\r\n            }\r\n            if(key == \"ArrowDown\") {\r\n                historyCursor = Math.max(historyCursor - 1, 0);\r\n                if(history[historyCursor]) {\r\n                    this.replaceInput(history[historyCursor]);\r\n                }\r\n            }\r\n            if(key == \"ArrowLeft\") {\r\n                cursor[0] = Math.max(cursor[0]-1, Math.max(prefix.length, 0));\r\n            }\r\n            if(key == \"ArrowRight\") {\r\n                cursor[0] = Math.min(cursor[0]+1, buffer[buffer.length-1].length);\r\n            }\r\n            if(key == \"Escape\") {\r\n                this.cancelInput();\r\n            }\r\n            if(key == \"End\") {\r\n                cursor[0] = buffer[buffer.length-1].length;\r\n            }\r\n            if(key == \"Home\") {\r\n                cursor[0] = Math.max(prefix.length, 0);\r\n            }\r\n            if(key == \"Backspace\") {\r\n                if(cursor[0] > 0 && cursor[0] > prefix.length) {\r\n                    const temp = buffer[buffer.length-1].split(\"\").slice(0, cursor[0]-1);\r\n                    const tail = buffer[buffer.length-1].split(\"\").slice(cursor[0]);\r\n                    temp.push(...tail);\r\n                    buffer[buffer.length-1] = temp.join(\"\");\r\n                    cursor[0]--;\r\n                }\r\n            }\r\n            if(key == \"Delete\") {\r\n                const temp = buffer[buffer.length-1].split(\"\").slice(0, cursor[0]);\r\n                const tail = buffer[buffer.length-1].split(\"\").slice(cursor[0]+1);\r\n                temp.push(...tail);\r\n                buffer[buffer.length-1] = temp.join(\"\");\r\n            }\r\n    \r\n            if(VALID_CHARS.indexOf(key) != -1 && !ctrl) {\r\n                this.write(key);\r\n            }\r\n        }\r\n\r\n        if(ctrl) {\r\n            const ev = new ShortcutEvent(key);\r\n            const canceled = this.dispatchEvent(ev);\r\n\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n\r\n            if(!ev.defaultPrevented) {\r\n                if(VALID_CHARS.indexOf(key) != -1) {\r\n                    this.dispatchEvent(new SubmitEvent(\"^\" + key));\r\n                }\r\n            }\r\n        }\r\n\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n    }\r\n\r\n    reformat() {\r\n        canvas.width = this.clientWidth;\r\n        canvas.height = this.clientHeight;\r\n\r\n        this.postCavnas.reformat(canvas.width, canvas.height);\r\n\r\n        const cursorY = this.getCursorPosition()[1];\r\n        view[1] = Math.max(0, cursorY - (canvas.height - (this.lineHeight * 3)));\r\n\r\n        this.bounds = this.getClientRects()[0];\r\n    }\r\n\r\n    draw(context) {\r\n        context.globalCompositeOperation = \"normal\";\r\n        context.fillStyle = \"#0c0c0c\";\r\n        context.fillRect(0, 0, context.canvas.width, context.canvas.height);\r\n\r\n        if(canvas.width <= 0) return;\r\n\r\n        context.font = `${FONT_WEIGHT} ${FONT_SIZE}px ${FONT_FAMILY}`;\r\n        context.textAlign = 'left';\r\n        context.textBaseline = 'top';\r\n        \r\n        const text = context.measureText(\"M\");\r\n        CHAR_WIDTH = text.width;\r\n\r\n        context.shadowColor = FONT_COLOR;\r\n        context.shadowBlur = SHADOW_BLUR;\r\n        \r\n        context.fillStyle = FONT_COLOR;\r\n\r\n        this.drawBuffer();\r\n\r\n        if(this.inputEnabled) {\r\n            this.drawCursor();\r\n        }\r\n        this.drawSelection();\r\n\r\n        context.shadowColor = \"none\";\r\n        context.shadowBlur = 0;\r\n\r\n        this.style.setProperty('--scrollY', view[1]);\r\n\r\n        img.onload = () => {\r\n            this.postCavnas.draw(img);\r\n        }\r\n        img.src = canvas.toDataURL();\r\n    }\r\n\r\n    drawCursor() {\r\n        const ts = Date.now() / 500;\r\n\r\n        if(ts % 2 > 1) {\r\n            const pos = this.getCursorPosition();\r\n\r\n            context.fillStyle = FONT_COLOR;\r\n            context.fillRect(pos[0], pos[1] - view[1], CURSOR_WIDTH, CURSOR_HEIGHT);\r\n        }\r\n    }\r\n\r\n    bufferToPixelPos(x, y) {\r\n        return [\r\n            x * CHAR_WIDTH + BORDER_PADDING[0] - view[0],\r\n            y * this.lineHeight + BORDER_PADDING[1] - view[1]\r\n        ]\r\n    }\r\n\r\n    drawSelection() {\r\n        const start = this.bufferToPixelPos(...selection[0]);\r\n        const end = this.bufferToPixelPos(...selection[1]);\r\n\r\n        context.globalCompositeOperation = \"screen\";\r\n        context.shadowColor = \"\";\r\n        context.shadowBlur = 0;\r\n\r\n        const lines = selection[1][1] - selection[0][1];\r\n        \r\n        for(let i = 0; i <= lines; i++) {\r\n            let x = 0;\r\n            const y = start[1] + (this.lineHeight * i);\r\n\r\n            let width = CHAR_WIDTH;\r\n\r\n            const xDiff = end[0] - start[0];\r\n\r\n            if(lines === i) {\r\n                width = xDiff + start[0];\r\n            } else {\r\n                width = canvas.width;\r\n            }\r\n\r\n            if(i === 0) {\r\n                x = start[0];\r\n\r\n                if(lines === i) {\r\n                    width = xDiff;\r\n                }\r\n            }\r\n\r\n            context.fillStyle = SLECTION_COLOR;\r\n            context.fillRect(x, y, width, this.lineHeight);\r\n        }\r\n\r\n        context.globalCompositeOperation = \"\";\r\n    }\r\n\r\n    getMaxBufferWidth() {\r\n        return canvas.width - (BORDER_PADDING[0] * 2);\r\n    }\r\n\r\n    get lineHeight() {\r\n        return CHAR_HEIGHT + LINE_PADDING;\r\n    }\r\n\r\n    getCursorPosition() {\r\n        const max_line_px_length = this.getMaxBufferWidth();\r\n\r\n        let posY = 0;\r\n        for(let i = 0; i < cursor[1]; i++) {\r\n            const line = buffer[i];\r\n\r\n            const html = this.parseHTMLLine(line);\r\n            if(html) {\r\n                posY += html.height / this.lineHeight;\r\n            } else {\r\n                const text = context.measureText(line);\r\n                if(max_line_px_length - text.width < 0 && LINE_WRAPPING) {\r\n                    const parts = sliceLine(line, max_line_px_length / CHAR_WIDTH);\r\n                    for(let part of parts) {\r\n                        posY++;\r\n                    }\r\n                } else {\r\n                    posY++;\r\n                }\r\n            }\r\n        }\r\n\r\n        const x = BORDER_PADDING[0] + (cursor[0] * CHAR_WIDTH);\r\n        const y = BORDER_PADDING[1] + (posY * CHAR_HEIGHT) + (posY * LINE_PADDING) + (CHAR_HEIGHT / 2) - (CURSOR_HEIGHT / 2);\r\n\r\n        return [x + CURSOR_OFFSET[0], y + CURSOR_OFFSET[1]];\r\n    }\r\n\r\n    parseHTMLLine(line) {\r\n        if(line.slice(0, 7) == \"\\\\\\\\\\\\HTML\") {\r\n            const htmlMeta = line.slice(7).split(\" \").slice(0, 3).join(\" \");\r\n            const [ nul, width, height ] = htmlMeta.split(\" \").map(v => +v);\r\n\r\n            return {\r\n                content: line.slice(7 + htmlMeta.length),\r\n                width, \r\n                height: Math.round(height / this.lineHeight) * this.lineHeight\r\n            }\r\n        }\r\n    }\r\n\r\n    drawBuffer() {\r\n        const max_line_px_length = this.getMaxBufferWidth();\r\n\r\n        let x = BORDER_PADDING[0];\r\n        let y = BORDER_PADDING[1] - view[1];\r\n\r\n        const drawLine = (line, index) => {\r\n            context.fillText(line, x, y);\r\n            y += CHAR_HEIGHT + LINE_PADDING;\r\n        }\r\n\r\n        let index = -1;\r\n        for(let line of buffer) {\r\n            index++;\r\n\r\n            const html = this.parseHTMLLine(line);\r\n            if(html) {\r\n                if(!htmlElements[index]) {\r\n                    htmlElements[index] = document.createElement('div');\r\n                    const ele = htmlElements[index];\r\n                    ele.className = \"inline-element\";\r\n                    ele.style.setProperty('--elementY', y + view[1]);\r\n                    ele.style.setProperty('--elementX', x);\r\n                    ele.style.setProperty('--elementWidth', html.width);\r\n                    ele.style.setProperty('--elementHeight', html.height);\r\n                    ele.innerHTML = html.content || \"\";\r\n                    this.shadowRoot.appendChild(ele);\r\n                }\r\n                y += html.height;\r\n            } else {\r\n                const text = context.measureText(line);\r\n                if(max_line_px_length - text.width < 0 && LINE_WRAPPING) {\r\n                    const parts = sliceLine(line, max_line_px_length / CHAR_WIDTH);\r\n                    for(let part of parts) {\r\n                        drawLine(part);\r\n                    }\r\n                } else {\r\n                    drawLine(line);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    loop() {\r\n        this.draw(context);\r\n        setTimeout(this.loop.bind(this), 1000 / 60);\r\n    }\r\n\r\n}\r\n\r\nfunction sliceLine(line, maxLength) {\r\n    if(maxLength < 0) {\r\n        return [];\r\n    }\r\n\r\n    const parts = [];\r\n\r\n    line = line.split(\"\");\r\n\r\n    while(line.length > maxLength) {\r\n        const temp = line.splice(0, maxLength);\r\n        parts.push(temp.join(\"\"));\r\n    }\r\n    parts.push(line.join(\"\"));\r\n\r\n    return parts;\r\n}\r\n\r\ncustomElements.define('gyro-terminal', Terminal);\r\n\n\n//# sourceURL=webpack://terminal/./src/Terminal.js?");

/***/ }),

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _ConsoleModule_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ConsoleModule.js */ \"./src/ConsoleModule.js\");\n/* harmony import */ var _Console_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Console.js */ \"./src/Console.js\");\n/* harmony import */ var _FileSystem_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./FileSystem.js */ \"./src/FileSystem.js\");\n/* harmony import */ var _modules_ws_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modules/ws.js */ \"./src/modules/ws.js\");\n/* harmony import */ var _modules_title_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modules/title.js */ \"./src/modules/title.js\");\n/* harmony import */ var _modules_echo_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./modules/echo.js */ \"./src/modules/echo.js\");\n/* harmony import */ var _modules_html_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./modules/html.js */ \"./src/modules/html.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nasync function startSequence() {\r\n    return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n            _Console_js__WEBPACK_IMPORTED_MODULE_1__.default.clear();\r\n            _Console_js__WEBPACK_IMPORTED_MODULE_1__.default.print(\"Booting up .\");\r\n        }, 1000 * 1);\r\n        setTimeout(() => {\r\n            _Console_js__WEBPACK_IMPORTED_MODULE_1__.default.clear();\r\n            _Console_js__WEBPACK_IMPORTED_MODULE_1__.default.print(\"Booting up ..\");\r\n        }, 1000 * 2);\r\n        setTimeout(() => {\r\n            _Console_js__WEBPACK_IMPORTED_MODULE_1__.default.clear();\r\n            _Console_js__WEBPACK_IMPORTED_MODULE_1__.default.print(\"Booting up ...\");\r\n        }, 1000 * 3);\r\n        setTimeout(() => {\r\n            _Console_js__WEBPACK_IMPORTED_MODULE_1__.default.clear();\r\n            _Console_js__WEBPACK_IMPORTED_MODULE_1__.default.print(\"Booting up .\");\r\n        }, 1000 * 4);\r\n        setTimeout(() => {\r\n            _Console_js__WEBPACK_IMPORTED_MODULE_1__.default.clear();\r\n            _Console_js__WEBPACK_IMPORTED_MODULE_1__.default.print(\"Booting up ..\");\r\n        }, 1000 * 5);\r\n        setTimeout(() => {\r\n            _Console_js__WEBPACK_IMPORTED_MODULE_1__.default.clear();\r\n            resolve();\r\n        }, 1000 * 6);\r\n    })\r\n}\r\n\r\nasync function sleep(seconds = 1) {\r\n    return new Promise((resolve) => {\r\n        setTimeout(() => resolve(), 1000 * seconds);\r\n    })\r\n}\r\n\r\nasync function initTerminal() {\r\n    \r\n    const nativeModules = [\r\n        _modules_ws_js__WEBPACK_IMPORTED_MODULE_3__.default,\r\n        _modules_title_js__WEBPACK_IMPORTED_MODULE_4__.default,\r\n        _modules_echo_js__WEBPACK_IMPORTED_MODULE_5__.default,\r\n        _modules_html_js__WEBPACK_IMPORTED_MODULE_6__.default,\r\n        ..._FileSystem_js__WEBPACK_IMPORTED_MODULE_2__.default.modules,\r\n    ]\r\n\r\n    const terminal = _Console_js__WEBPACK_IMPORTED_MODULE_1__.default.getTerminal();\r\n    terminal.clear();\r\n    terminal.disableInput();\r\n\r\n    setTimeout(async () => {\r\n        const terminal = _Console_js__WEBPACK_IMPORTED_MODULE_1__.default.getTerminal();\r\n        \r\n        await startSequence();\r\n        \r\n        await _Console_js__WEBPACK_IMPORTED_MODULE_1__.default.simulateWrite(\"Initializing\\n\\n\");\r\n        await sleep();\r\n\r\n        await _Console_js__WEBPACK_IMPORTED_MODULE_1__.default.log(\"Loading modules\\n\");\r\n        await sleep(0.5);\r\n        for(let modulePath of nativeModules) {\r\n            let module = modulePath;\r\n            if(typeof module === \"string\") {\r\n                module = await _Console_js__WEBPACK_IMPORTED_MODULE_1__.default.fetchModule(modulePath).catch(err => {\r\n                    _Console_js__WEBPACK_IMPORTED_MODULE_1__.default.log(\"[Error] \" + err.message);\r\n                })\r\n            }\r\n            await _Console_js__WEBPACK_IMPORTED_MODULE_1__.default.installModule(module);\r\n            await sleep(0.05);\r\n        }\r\n\r\n        await _Console_js__WEBPACK_IMPORTED_MODULE_1__.default.loadModules();\r\n        _Console_js__WEBPACK_IMPORTED_MODULE_1__.default.print(\"\");\r\n\r\n        terminal.addEventListener('shortcut', e => {\r\n            if(e.key == \"r\") {\r\n                location.reload();\r\n            } else if(e.key == \"v\") {\r\n                navigator.clipboard.readText().then(txt => {\r\n                    terminal.write(txt);\r\n                })\r\n                e.defaultPrevented = true;\r\n            }\r\n        });\r\n\r\n        while(true) {\r\n            const value = await terminal.read(_Console_js__WEBPACK_IMPORTED_MODULE_1__.default.INPUT_PREFIX);\r\n            const args = value.split(\" \");\r\n            await _Console_js__WEBPACK_IMPORTED_MODULE_1__.default.evaluateInput(args).catch(err => {\r\n                console.error(err);\r\n                _Console_js__WEBPACK_IMPORTED_MODULE_1__.default.print(`\\n[Internal Error]: ${err.message}\\n`);\r\n            });\r\n        }\r\n\r\n    }, 50);\r\n\r\n    return _Console_js__WEBPACK_IMPORTED_MODULE_1__.default;\r\n}\r\n\r\nwindow.createTerminal = async () => {\r\n    return await initTerminal();\r\n}\r\n\n\n//# sourceURL=webpack://terminal/./src/main.js?");

/***/ }),

/***/ "./src/modules/echo.js":
/*!*****************************!*\
  !*** ./src/modules/echo.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony import */ var _Console__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Console */ \"./src/Console.js\");\n\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n    moduleName: \"echo\",\r\n    commandName: \"echo\",\r\n    install() {},\r\n    run(arguemnts) {\r\n        _Console__WEBPACK_IMPORTED_MODULE_0__.default.print(arguemnts.join(\" \"));\r\n    }\r\n});\n\n//# sourceURL=webpack://terminal/./src/modules/echo.js?");

/***/ }),

/***/ "./src/modules/html.js":
/*!*****************************!*\
  !*** ./src/modules/html.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony import */ var _Console__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Console */ \"./src/Console.js\");\n\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n    moduleName: \"html\",\r\n    commandName: \"html\",\r\n    install() {},\r\n    run(arguemnts) {\r\n        _Console__WEBPACK_IMPORTED_MODULE_0__.default.printHTML(arguemnts[0], arguemnts[1], arguemnts.slice(2).join(\" \"));\r\n    }\r\n});\r\n\n\n//# sourceURL=webpack://terminal/./src/modules/html.js?");

/***/ }),

/***/ "./src/modules/title.js":
/*!******************************!*\
  !*** ./src/modules/title.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n    moduleName: \"title\",\r\n    commandName: \"title\",\r\n    install() {},\r\n    run(arguemnts) {\r\n        const newTitle = arguemnts.join(\" \");\r\n        document.title = newTitle;\r\n    }\r\n});\n\n//# sourceURL=webpack://terminal/./src/modules/title.js?");

/***/ }),

/***/ "./src/modules/ws.js":
/*!***************************!*\
  !*** ./src/modules/ws.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => /* binding */ WebsocketModule\n/* harmony export */ });\nlet Console;\r\n\r\nasync function connectToWebSocket(host) {\r\n    return new Promise((resolve, reject) => {\r\n        const ws = new WebSocket(host, \"terminal-protocol\");\r\n\r\n        ws.onopen = (event) => {\r\n            resolve(ws);\r\n        };\r\n\r\n        ws.onerror = (event) => {\r\n            reject(event);\r\n        };\r\n    })\r\n}\r\n\r\nclass WebsocketModule extends ConsoleModule {\r\n    \r\n    static get moduleName() {\r\n        return \"ws-module\";\r\n    }\r\n\r\n    static get commandName() {\r\n        return \"ws\";\r\n    }\r\n    \r\n    static install(cnsl) {\r\n        Console = cnsl;\r\n    }\r\n\r\n    static uninstall() {\r\n        \r\n    }\r\n\r\n    static _handleSocketMessage(ws, msg) {\r\n        const terminal = Console.getTerminal();\r\n        const data = JSON.parse(msg.data);\r\n        \r\n        if(data.type == \"message\") {\r\n            const str = `${data.data.username}: ${data.data.text}`;\r\n            terminal.append(terminal.cursor[1], str);\r\n        }\r\n        \r\n        if(data.type == \"left\") {\r\n            const str = `${data.data.username} left the room.`;\r\n            terminal.append(terminal.cursor[1], str);\r\n        }\r\n    }\r\n    \r\n    static async run(args) {\r\n        const arg1 = args[0].split(\"@\");\r\n        const login = arg1[0];\r\n        const address = arg1[1];\r\n\r\n        if(address == \"\" || !address) {\r\n            Console.print(\"Missing address to connect to.\");\r\n            return;\r\n        }\r\n\r\n        const terminal = Console.getTerminal();\r\n        terminal.setPrefix(\"\");\r\n        terminal.disableInput();\r\n        Console.print(`Connecting to ${args[0]}`);\r\n\r\n        let url = `wss:${address}`;\r\n        // if(location.origin.match('localhost:3000')) {\r\n        //     url = location.origin.replace(\"https\", \"wss\").replace(\"http\", \"ws\");\r\n        // }\r\n\r\n        return connectToWebSocket(url).then(async ws => {\r\n            WebsocketModule.prefix = args[0] + \":$ \";\r\n\r\n            ws.onmessage = msg => {\r\n                this._handleSocketMessage(ws, msg);\r\n            };\r\n    \r\n            Console.print('Connected.');\r\n            Console.print('');\r\n    \r\n            while(true) {\r\n                const input = await terminal.read(WebsocketModule.prefix);\r\n                if(input == \"\") continue;\r\n    \r\n                ws.send(JSON.stringify({\r\n                    type: 'input',\r\n                    data: {\r\n                        input,\r\n                    }\r\n                }));\r\n    \r\n                if(input.toLocaleLowerCase() == \"^c\") {\r\n                    return 1;\r\n                    break;\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            console.error(err);\r\n            Console.print(`Error connecting to ${args[0]}`);\r\n        })\r\n    }\r\n\r\n}\r\n\r\nWebsocketModule.prefix = \"> \";\n\n//# sourceURL=webpack://terminal/./src/modules/ws.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	__webpack_require__("./src/main.js");
/******/ 	// This entry module used 'exports' so it can't be inlined
/******/ })()
;